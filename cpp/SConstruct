# SCons file for emvm

import os
import re
import subprocess

LLVM_CONFIG = "/usr/local/bin/llvm-config"
CLANG = "/usr/bin/clang"
GCC47 = "/usr/local/bin/g++-4.7"
SWIG = "/usr/local/Cellar/swig/2.0.9/bin/swig"

PYTHON_INCLUDES = (
    "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/include/"
    "python2.7/")
NUMPY_INCLUDES = (
    "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/"
    "python/numpy/core/include/")
DIR = os.path.abspath('.')

config = None
env = None

class LLVMConfig(object):
    LLVM_OPTIONS = ("includedir", "libdir", "libfiles", "cxxflags")
    def __init__(self, include_path, lib_dir, libfiles, cxxflags):
        self.include_path = include_path
        self.lib_dir = lib_dir
        self.libs = libfiles
        self.cxxflags = cxxflags + " -std=c++0x -fexceptions -g -O0"

    def scons_kwargs(self):
        return {
            "LIBPATH": self.lib_dir,
            "LIBS": map(File, self.libs.split()),
            "CPPPATH": [self.include_path, DIR, PYTHON_INCLUDES],
            "CCFLAGS": self.cxxflags,
            "CXX": GCC47,
        }

    @classmethod
    def llvm_options(cls, opts):
        name_to_ix = dict((opt, ix) for ix, opt in enumerate(opts))
        flags = tuple(["--%s" % opt for opt in sorted(opts)])
        stdout = subprocess.check_output((LLVM_CONFIG,) + flags)
        options = [None for _ in opts]
        for line, name in zip(stdout.strip().split("\n"), sorted(opts)):
            options[name_to_ix[name]] = line
        assert None not in options
        return options

    @classmethod
    def load(cls):
        if not os.path.isfile(LLVM_CONFIG):
            raise ValueError("%s not found" % LLVM_CONFIG)
        return cls(*cls.llvm_options(cls.LLVM_OPTIONS))

def UnitTest(source):
    if not isinstance(source, basestring):
        raise TypeError("UnitTest expects a source name")
    target = re.sub(
        r'([a-z]+)([A-Z]+)',
        lambda match: match.group(1) + '_' + match.group(2),
        os.path.splitext(source)[0]).lower()
    return env.Program(
        source=[Object(source, **config.scons_kwargs())] + emvm_lib,
        target=target,
        **config.scons_kwargs())

def compile_swig_extension(target, source, env):
    assert len(target) == 2, "Improperly emitted SWIG targets?"
    py_module_file, wrapper_file = map(str, target)
    py_module = os.path.splitext(os.path.basename(py_module_file))[0]
    subprocess.check_call(
        (SWIG,
         "-c++",
         "-python",
         "-o", wrapper_file,
         "-module", py_module,
         str(source[0])))

def update_swig_targets(target, source, env):
    if len(source) != 1:
        raise ValueError("Expected exactly one SWIG interface file")
    if len(target) != 1:
        raise ValueError("Expected exactly one SWIG target")
    filename = str(target[0])
    return [filename + ".py", filename + ".gen.cc"], source

swig_py_extension = Builder(
    action=compile_swig_extension,
    src_suffix=".i",
    emitter=update_swig_targets)

# Configure
config = LLVMConfig.load()
env = Environment(BUILDERS={"SwigPyExtension": swig_py_extension})

# Make

emvm_lib = env.Library(
    source=["EmvmBuilder.cc", "EmvmExecutor.cc", "ValuePromise.cc"],
    target="Emvm",
    **config.scons_kwargs())

test_sources = ["test/EmvmBuilderTest.cc"]
unit_tests = map(UnitTest, test_sources)

pyemvm = env.SwigPyExtension(target="pyemvm", source=["emvm.i"])

wrapper_so_kwargs = config.scons_kwargs()
wrapper_so_kwargs["LIBS"].append(emvm_lib)
wrapper_so_kwargs["LIBS"].append("python2.7")
wrapper_so_kwargs["CPPPATH"].append(NUMPY_INCLUDES)
wrapper_so_kwargs["CCFLAGS"] += " -frtti"
wrapper_so = env.SharedLibrary(
    source=[src for src in pyemvm if str(src).endswith(".cc")],
    target="_pyemvm",
    SHLIBPREFIX="",
    SHLIBSUFFIX=".so",
    **wrapper_so_kwargs)

install_dir = os.path.join(os.path.dirname(DIR), "py")
wrapper_py = os.path.join(DIR, "pyemvm.py")
